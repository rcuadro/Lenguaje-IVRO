
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu May 15 22:04:15 CEST 2025
//----------------------------------------------------

package constructorAst;

import java_cup.runtime.*;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;
import ast.expresiones.*;
import ast.expresiones.accesos.*;
import ast.instruccion.*;
import ast.instruccion.bucle.*;
import ast.instruccion.condicional.*;
import ast.instruccion.funciones.*;
import ast.tipos.*;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu May 15 22:04:15 CEST 2025
  */
public class AnalizadorSintacticoExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoExp() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\044\012\000\002\044\014\000\002\044\012\000" +
    "\002\044\012\000\002\045\006\000\002\045\007\000\002" +
    "\045\004\000\002\045\005\000\002\050\003\000\002\050" +
    "\007\000\002\041\012\000\002\041\012\000\002\046\006" +
    "\000\002\046\006\000\002\046\006\000\002\047\005\000" +
    "\002\047\003\000\002\047\002\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\010" +
    "\003\000\002\010\004\000\002\010\007\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\005\004\000\002\005\006\000\002\005\007\000\002" +
    "\011\006\000\002\012\012\000\002\013\005\000\002\013" +
    "\003\000\002\014\007\000\002\014\005\000\002\014\005" +
    "\000\002\014\003\000\002\035\011\000\002\035\007\000" +
    "\002\036\015\000\002\036\007\000\002\037\012\000\002" +
    "\037\010\000\002\042\012\000\002\042\010\000\002\043" +
    "\004\000\002\043\006\000\002\043\002\000\002\055\007" +
    "\000\002\056\011\000\002\056\007\000\002\056\002\000" +
    "\002\040\004\000\002\040\002\000\002\004\004\000\002" +
    "\004\004\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\005\000\002\004\005\000" +
    "\002\004\004\000\002\006\005\000\002\016\005\000\002" +
    "\016\003\000\002\017\005\000\002\017\003\000\002\020" +
    "\004\000\002\020\003\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\024\005\000\002\024\003\000\002" +
    "\025\005\000\002\025\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\003\000\002\026\004\000\002\007\005\000" +
    "\002\007\003\000\002\007\002\000\002\034\003\000\002" +
    "\034\003\000\002\051\004\000\002\051\003\000\002\053" +
    "\005\000\002\053\003\000\002\052\006\000\002\052\003" +
    "\000\002\054\003\000\002\027\003\000\002\027\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\030\002\ufffc\003\ufffc\004\ufffc\005\ufffc\007" +
    "\ufffc\036\ufffc\062\ufffc\065\ufffc\066\ufffc\067\ufffc\072\ufffc" +
    "\001\002\000\004\002\u0121\001\002\000\030\002\001\003" +
    "\026\004\010\005\011\007\012\036\024\062\015\065\023" +
    "\066\013\067\021\072\016\001\002\000\004\043\uffe7\001" +
    "\002\000\030\002\ufffe\003\ufffe\004\ufffe\005\ufffe\007\ufffe" +
    "\036\ufffe\062\ufffe\065\ufffe\066\ufffe\067\ufffe\072\ufffe\001" +
    "\002\000\004\040\u0110\001\002\000\014\036\024\062\030" +
    "\065\023\066\013\072\016\001\002\000\014\036\024\062" +
    "\030\065\023\066\013\072\016\001\002\000\062\006\uffe1" +
    "\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\034" +
    "\uffe1\035\uffe1\037\uffe1\041\uffe1\043\uffe1\044\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055" +
    "\uffe1\056\uffe1\057\uffe1\062\uffe1\001\002\000\004\043\uffe9" +
    "\001\002\000\010\042\337\047\uffe2\062\uffe2\001\002\000" +
    "\062\006\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\034\uffdf\035\uffdf\037\uffdf\041\uffdf\043\uffdf\044" +
    "\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf" +
    "\054\uffdf\055\uffdf\056\uffdf\057\uffdf\062\uffdf\001\002\000" +
    "\056\006\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\035\uffe5\037\uffe5\041\uffe5\043\uffe5\044\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\062\uffe5\001\002\000\006\047\033\062" +
    "\334\001\002\000\004\042\157\001\002\000\004\043\156" +
    "\001\002\000\062\006\uffe0\024\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\037\uffe0\041\uffe0" +
    "\043\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\062\uffe0" +
    "\001\002\000\014\036\024\062\030\065\023\066\013\072" +
    "\016\001\002\000\004\043\uffe8\001\002\000\004\043\uffe6" +
    "\001\002\000\030\002\ufffd\003\ufffd\004\ufffd\005\ufffd\007" +
    "\ufffd\036\ufffd\062\ufffd\065\ufffd\066\ufffd\067\ufffd\072\ufffd" +
    "\001\002\000\062\006\uffe2\024\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\037\uffe2\041\uffe2" +
    "\043\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\062\uffe2" +
    "\001\002\000\006\044\032\047\033\001\002\000\030\022" +
    "\036\025\044\034\034\036\062\040\061\047\064\062\047" +
    "\063\055\064\065\070\040\071\056\001\002\000\056\006" +
    "\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\035\uffe4\037\uffe4\041\uffe4\043\uffe4\044\uffe4\047\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\057\uffe4\062\uffe4\001\002\000\034\022\036\025\044\034" +
    "\034\035\uff9c\036\062\040\061\044\uff9c\047\064\062\047" +
    "\063\055\064\065\070\040\071\056\001\002\000\060\024" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\035\uff96\036\uff96\037\uff96\041\uff96\043\uff96\044" +
    "\uff96\045\152\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\057\uff96\001\002\000\014\036\024\062" +
    "\030\065\023\066\013\072\016\001\002\000\056\024\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\041\uff94\043\uff94\044\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056" +
    "\uff94\057\uff94\001\002\000\004\040\146\001\002\000\050" +
    "\024\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\035" +
    "\uffa4\037\uffa4\041\uffa4\043\uffa4\044\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\001" +
    "\002\000\056\024\uff98\026\uff98\027\uff98\030\uff98\031\uff98" +
    "\032\uff98\033\uff98\034\uff98\035\uff98\036\143\037\uff98\041" +
    "\uff98\043\uff98\044\uff98\050\uff98\051\uff98\052\uff98\053\uff98" +
    "\054\uff98\055\uff98\056\uff98\057\uff98\001\002\000\050\024" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\035\uffa5" +
    "\037\uffa5\041\uffa5\043\uffa5\044\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\001\002" +
    "\000\030\022\036\025\044\034\034\036\062\040\061\047" +
    "\064\062\047\063\055\064\065\070\040\071\056\001\002" +
    "\000\050\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\035\uffa6\037\uffa6\041\uffa6\043\uffa6\044\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057" +
    "\uffa6\001\002\000\050\024\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\035\uffa8\037\uffa8\041\uffa8\043\uffa8\044" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\132\055\uffa8" +
    "\056\uffa8\057\uffa8\001\002\000\056\024\uff93\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\035\uff93\036\uff93\037\uff93" +
    "\040\134\041\uff93\043\uff93\044\uff93\045\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93" +
    "\001\002\000\046\024\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\035\uffaa\037\uffaa\041\uffaa\043\uffaa\044\uffaa" +
    "\050\uffaa\051\uffaa\052\127\053\130\055\126\056\uffaa\057" +
    "\uffaa\001\002\000\040\024\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\032\uffac\035\uffac\037\uffac\041\uffac\043\uffac\044" +
    "\uffac\050\122\051\123\056\uffac\057\uffac\001\002\000\034" +
    "\024\uffae\026\uffae\027\117\030\115\031\114\032\116\035" +
    "\uffae\037\uffae\041\uffae\043\uffae\044\uffae\056\uffae\057\uffae" +
    "\001\002\000\024\024\107\026\111\035\uffb0\037\uffb0\041" +
    "\uffb0\043\uffb0\044\uffb0\056\uffb0\057\uffb0\001\002\000\020" +
    "\035\uffb2\037\uffb2\041\uffb2\043\uffb2\044\uffb2\056\uffb2\057" +
    "\uffb2\001\002\000\050\024\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\035\uff9b\037\uff9b\041\uff9b\043\uff9b\044" +
    "\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\057\uff9b\001\002\000\004\040\104\001\002\000" +
    "\020\035\uffb4\037\uffb4\041\uffb4\043\uffb4\044\uffb4\056\077" +
    "\057\uffb4\001\002\000\006\037\103\057\075\001\002\000" +
    "\030\022\036\025\044\034\034\036\062\040\061\047\064" +
    "\062\047\063\055\064\065\070\040\071\056\001\002\000" +
    "\034\022\036\025\044\034\034\036\062\037\uff9c\040\061" +
    "\044\uff9c\047\064\062\047\063\055\064\065\070\040\071" +
    "\056\001\002\000\050\024\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\035\uffa0\037\uffa0\041\uffa0\043\uffa0\044" +
    "\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\056\uffa0\057\uffa0\001\002\000\006\047\064\062\067\001" +
    "\002\000\050\024\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\035\uff9a\037\uff9a\041\uff9a\043\uff9a\044\uff9a\050" +
    "\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a" +
    "\057\uff9a\001\002\000\054\024\uff99\026\uff99\027\uff99\030" +
    "\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99\037\uff99" +
    "\041\uff99\043\uff99\044\uff99\050\uff99\051\uff99\052\uff99\053" +
    "\uff99\054\uff99\055\uff99\056\uff99\057\uff99\001\002\000\060" +
    "\024\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033" +
    "\uff93\034\uff93\035\uff93\036\uff93\037\uff93\041\uff93\043\uff93" +
    "\044\uff93\045\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054" +
    "\uff93\055\uff93\056\uff93\057\uff93\001\002\000\012\035\uff9d" +
    "\037\uff9d\044\uff9d\057\075\001\002\000\006\037\073\044" +
    "\072\001\002\000\030\022\036\025\044\034\034\036\062" +
    "\040\061\047\064\062\047\063\055\064\065\070\040\071" +
    "\056\001\002\000\050\024\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\035\uffa1\037\uffa1\041\uffa1\043\uffa1\044" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\001\002\000\012\035\uff9e\037\uff9e\044" +
    "\uff9e\057\075\001\002\000\030\022\036\025\044\034\034" +
    "\036\062\040\061\047\064\062\047\063\055\064\065\070" +
    "\040\071\056\001\002\000\020\035\uffb5\037\uffb5\041\uffb5" +
    "\043\uffb5\044\uffb5\056\077\057\uffb5\001\002\000\030\022" +
    "\036\025\044\034\034\036\062\040\061\047\064\062\047" +
    "\063\055\064\065\070\040\071\056\001\002\000\020\035" +
    "\uffb3\037\uffb3\041\uffb3\043\uffb3\044\uffb3\056\uffb3\057\uffb3" +
    "\001\002\000\006\041\102\057\075\001\002\000\050\024" +
    "\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\035\uffa2" +
    "\037\uffa2\041\uffa2\043\uffa2\044\uffa2\050\uffa2\051\uffa2\052" +
    "\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\001\002" +
    "\000\056\006\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\035\uffe3\037\uffe3\041\uffe3\043\uffe3\044\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\057\uffe3\062\uffe3\001\002\000\030\022\036" +
    "\025\044\034\034\036\062\040\061\047\064\062\047\063" +
    "\055\064\065\070\040\071\056\001\002\000\006\041\106" +
    "\057\075\001\002\000\050\024\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\032\uffed\035\uffed\037\uffed\041\uffed\043\uffed" +
    "\044\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055" +
    "\uffed\056\uffed\057\uffed\001\002\000\026\022\uff92\034\uff92" +
    "\036\uff92\040\uff92\047\uff92\062\uff92\063\uff92\064\uff92\070" +
    "\uff92\071\uff92\001\002\000\026\022\036\034\034\036\062" +
    "\040\061\047\064\062\047\063\055\064\065\070\040\071" +
    "\056\001\002\000\026\022\uff91\034\uff91\036\uff91\040\uff91" +
    "\047\uff91\062\uff91\063\uff91\064\uff91\070\uff91\071\uff91\001" +
    "\002\000\034\024\uffaf\026\uffaf\027\117\030\115\031\114" +
    "\032\116\035\uffaf\037\uffaf\041\uffaf\043\uffaf\044\uffaf\056" +
    "\uffaf\057\uffaf\001\002\000\026\022\036\034\034\036\062" +
    "\040\061\047\064\062\047\063\055\064\065\070\040\071" +
    "\056\001\002\000\026\022\uff8f\034\uff8f\036\uff8f\040\uff8f" +
    "\047\uff8f\062\uff8f\063\uff8f\064\uff8f\070\uff8f\071\uff8f\001" +
    "\002\000\026\022\uff8d\034\uff8d\036\uff8d\040\uff8d\047\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\070\uff8d\071\uff8d\001\002\000" +
    "\026\022\uff90\034\uff90\036\uff90\040\uff90\047\uff90\062\uff90" +
    "\063\uff90\064\uff90\070\uff90\071\uff90\001\002\000\026\022" +
    "\uff8e\034\uff8e\036\uff8e\040\uff8e\047\uff8e\062\uff8e\063\uff8e" +
    "\064\uff8e\070\uff8e\071\uff8e\001\002\000\040\024\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\035\uffad\037\uffad" +
    "\041\uffad\043\uffad\044\uffad\050\122\051\123\056\uffad\057" +
    "\uffad\001\002\000\026\022\036\034\034\036\062\040\061" +
    "\047\064\062\047\063\055\064\065\070\040\071\056\001" +
    "\002\000\026\022\uff8c\034\uff8c\036\uff8c\040\uff8c\047\uff8c" +
    "\062\uff8c\063\uff8c\064\uff8c\070\uff8c\071\uff8c\001\002\000" +
    "\026\022\uff8b\034\uff8b\036\uff8b\040\uff8b\047\uff8b\062\uff8b" +
    "\063\uff8b\064\uff8b\070\uff8b\071\uff8b\001\002\000\046\024" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\035\uffab" +
    "\037\uffab\041\uffab\043\uffab\044\uffab\050\uffab\051\uffab\052" +
    "\127\053\130\055\126\056\uffab\057\uffab\001\002\000\026" +
    "\022\036\034\034\036\062\040\061\047\064\062\047\063" +
    "\055\064\065\070\040\071\056\001\002\000\026\022\uff88" +
    "\034\uff88\036\uff88\040\uff88\047\uff88\062\uff88\063\uff88\064" +
    "\uff88\070\uff88\071\uff88\001\002\000\026\022\uff8a\034\uff8a" +
    "\036\uff8a\040\uff8a\047\uff8a\062\uff8a\063\uff8a\064\uff8a\070" +
    "\uff8a\071\uff8a\001\002\000\026\022\uff89\034\uff89\036\uff89" +
    "\040\uff89\047\uff89\062\uff89\063\uff89\064\uff89\070\uff89\071" +
    "\uff89\001\002\000\050\024\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\035\uffa9\037\uffa9\041\uffa9\043\uffa9\044" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\132\055\uffa9" +
    "\056\uffa9\057\uffa9\001\002\000\026\022\036\034\034\036" +
    "\062\040\061\047\064\062\047\063\055\064\065\070\040" +
    "\071\056\001\002\000\050\024\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\032\uffa7\035\uffa7\037\uffa7\041\uffa7\043\uffa7" +
    "\044\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\001\002\000\034\022\036\025\044" +
    "\034\034\036\062\040\061\041\uffea\044\uffea\047\064\062" +
    "\047\063\055\064\065\070\040\071\056\001\002\000\010" +
    "\041\uffeb\044\uffeb\057\075\001\002\000\006\041\140\044" +
    "\137\001\002\000\030\022\036\025\044\034\034\036\062" +
    "\040\061\047\064\062\047\063\055\064\065\070\040\071" +
    "\056\001\002\000\050\024\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\035\uffef\037\uffef\041\uffef\043\uffef\044" +
    "\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef" +
    "\056\uffef\057\uffef\001\002\000\010\041\uffec\044\uffec\057" +
    "\075\001\002\000\020\035\uffb1\037\uffb1\041\uffb1\043\uffb1" +
    "\044\uffb1\056\uffb1\057\uffb1\001\002\000\030\022\036\025" +
    "\044\034\034\036\062\040\061\047\064\062\047\063\055" +
    "\064\065\070\040\071\056\001\002\000\006\037\145\057" +
    "\075\001\002\000\056\024\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\041\uff95\043\uff95\044\uff95\050\uff95\051\uff95\052\uff95" +
    "\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\001\002\000" +
    "\004\062\147\001\002\000\004\041\150\001\002\000\050" +
    "\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\035" +
    "\uffee\037\uffee\041\uffee\043\uffee\044\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\001" +
    "\002\000\052\024\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\035\uff9f\037\uff9f\041\uff9f\043\uff9f\044\uff9f\047" +
    "\033\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\001\002\000\004\062\067\001\002\000" +
    "\056\024\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97" +
    "\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\041\uff97\043" +
    "\uff97\044\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\056\uff97\057\uff97\001\002\000\006\035\155\044" +
    "\072\001\002\000\050\024\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\035\uffa3\037\uffa3\041\uffa3\043\uffa3\044" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\uffa3\057\uffa3\001\002\000\030\002\uffff\003\uffff\004" +
    "\uffff\005\uffff\007\uffff\036\uffff\062\uffff\065\uffff\066\uffff" +
    "\067\uffff\072\uffff\001\002\000\006\003\161\072\160\001" +
    "\002\000\004\061\327\001\002\000\004\061\162\001\002" +
    "\000\004\065\163\001\002\000\004\034\164\001\002\000" +
    "\046\003\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\016\uffc3\021\uffc3\023\uffc3\035\uffc3\036\uffc3\047\uffc3\062" +
    "\uffc3\065\uffc3\066\uffc3\070\uffc3\071\uffc3\072\uffc3\001\002" +
    "\000\046\003\205\007\012\010\177\012\210\013\166\014" +
    "\173\016\204\021\167\023\200\035\206\036\024\047\064" +
    "\062\176\065\023\066\013\070\040\071\056\072\016\001" +
    "\002\000\006\003\315\040\316\001\002\000\032\022\036" +
    "\025\044\034\034\036\062\040\061\043\312\047\064\062" +
    "\047\063\055\064\065\070\040\071\056\001\002\000\046" +
    "\003\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4\016" +
    "\uffc4\021\uffc4\023\uffc4\035\uffc4\036\uffc4\047\uffc4\062\uffc4" +
    "\065\uffc4\066\uffc4\070\uffc4\071\uffc4\072\uffc4\001\002\000" +
    "\046\003\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\016\uffbc\021\uffbc\023\uffbc\035\uffbc\036\uffbc\047\uffbc\062" +
    "\uffbc\065\uffbc\066\uffbc\070\uffbc\071\uffbc\072\uffbc\001\002" +
    "\000\004\033\310\001\002\000\004\034\300\001\002\000" +
    "\004\043\277\001\002\000\046\003\uffbe\007\uffbe\010\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\016\uffbe\021\uffbe\023\uffbe\035" +
    "\uffbe\036\uffbe\047\uffbe\062\uffbe\065\uffbe\066\uffbe\070\uffbe" +
    "\071\uffbe\072\uffbe\001\002\000\016\033\uff93\036\uff93\040" +
    "\134\045\uff93\047\uffe2\062\uffe2\001\002\000\006\003\256" +
    "\040\257\001\002\000\006\047\064\062\067\001\002\000" +
    "\004\043\253\001\002\000\046\003\uffbf\007\uffbf\010\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\016\uffbf\021\uffbf\023\uffbf\035" +
    "\uffbf\036\uffbf\047\uffbf\062\uffbf\065\uffbf\066\uffbf\070\uffbf" +
    "\071\uffbf\072\uffbf\001\002\000\046\003\uffc0\007\uffc0\010" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0\021\uffc0\023\uffc0" +
    "\035\uffc0\036\uffc0\047\uffc0\062\uffc0\065\uffc0\066\uffc0\070" +
    "\uffc0\071\uffc0\072\uffc0\001\002\000\006\047\064\062\067" +
    "\001\002\000\004\043\232\001\002\000\030\002\ufff0\003" +
    "\ufff0\004\ufff0\005\ufff0\007\ufff0\036\ufff0\062\ufff0\065\ufff0" +
    "\066\ufff0\067\ufff0\072\ufff0\001\002\000\004\043\231\001" +
    "\002\000\006\003\213\040\214\001\002\000\004\043\212" +
    "\001\002\000\046\003\uffbb\007\uffbb\010\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\016\uffbb\021\uffbb\023\uffbb\035\uffbb\036\uffbb" +
    "\047\uffbb\062\uffbb\065\uffbb\066\uffbb\070\uffbb\071\uffbb\072" +
    "\uffbb\001\002\000\004\034\226\001\002\000\016\007\012" +
    "\036\024\062\030\065\023\066\013\072\016\001\002\000" +
    "\004\043\216\001\002\000\030\022\036\025\044\034\034" +
    "\036\062\040\061\047\064\062\047\063\055\064\065\070" +
    "\040\071\056\001\002\000\006\043\220\057\075\001\002" +
    "\000\006\047\064\062\067\001\002\000\004\041\222\001" +
    "\002\000\004\034\223\001\002\000\046\003\uffc3\007\uffc3" +
    "\010\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\021\uffc3\023" +
    "\uffc3\035\uffc3\036\uffc3\047\uffc3\062\uffc3\065\uffc3\066\uffc3" +
    "\070\uffc3\071\uffc3\072\uffc3\001\002\000\046\003\205\007" +
    "\012\010\177\012\210\013\166\014\173\016\204\021\167" +
    "\023\200\035\225\036\024\047\064\062\176\065\023\066" +
    "\013\070\040\071\056\072\016\001\002\000\046\003\uffd1" +
    "\007\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\016\uffd1\021" +
    "\uffd1\023\uffd1\035\uffd1\036\uffd1\047\uffd1\062\uffd1\065\uffd1" +
    "\066\uffd1\070\uffd1\071\uffd1\072\uffd1\001\002\000\046\003" +
    "\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3" +
    "\021\uffc3\023\uffc3\035\uffc3\036\uffc3\047\uffc3\062\uffc3\065" +
    "\uffc3\066\uffc3\070\uffc3\071\uffc3\072\uffc3\001\002\000\046" +
    "\003\205\007\012\010\177\012\210\013\166\014\173\016" +
    "\204\021\167\023\200\035\230\036\024\047\064\062\176" +
    "\065\023\066\013\070\040\071\056\072\016\001\002\000" +
    "\046\003\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\016\uffd0\021\uffd0\023\uffd0\035\uffd0\036\uffd0\047\uffd0\062" +
    "\uffd0\065\uffd0\066\uffd0\070\uffd0\071\uffd0\072\uffd0\001\002" +
    "\000\046\003\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\016\uffbd\021\uffbd\023\uffbd\035\uffbd\036\uffbd\047\uffbd" +
    "\062\uffbd\065\uffbd\066\uffbd\070\uffbd\071\uffbd\072\uffbd\001" +
    "\002\000\046\003\uffb7\007\uffb7\010\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\016\uffb7\021\uffb7\023\uffb7\035\uffb7\036\uffb7\047" +
    "\uffb7\062\uffb7\065\uffb7\066\uffb7\070\uffb7\071\uffb7\072\uffb7" +
    "\001\002\000\004\034\234\001\002\000\010\017\237\020" +
    "\235\035\uffc5\001\002\000\004\060\247\001\002\000\004" +
    "\035\246\001\002\000\004\063\240\001\002\000\004\060" +
    "\241\001\002\000\004\034\242\001\002\000\046\003\uffc3" +
    "\007\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\021" +
    "\uffc3\023\uffc3\035\uffc3\036\uffc3\047\uffc3\062\uffc3\065\uffc3" +
    "\066\uffc3\070\uffc3\071\uffc3\072\uffc3\001\002\000\046\003" +
    "\205\007\012\010\177\012\210\013\166\014\173\016\204" +
    "\021\167\023\200\035\244\036\024\047\064\062\176\065" +
    "\023\066\013\070\040\071\056\072\016\001\002\000\010" +
    "\017\237\020\235\035\uffc5\001\002\000\004\035\uffc7\001" +
    "\002\000\046\003\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\016\uffc8\021\uffc8\023\uffc8\035\uffc8\036\uffc8\047" +
    "\uffc8\062\uffc8\065\uffc8\066\uffc8\070\uffc8\071\uffc8\072\uffc8" +
    "\001\002\000\004\034\250\001\002\000\046\003\uffc3\007" +
    "\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\021\uffc3" +
    "\023\uffc3\035\uffc3\036\uffc3\047\uffc3\062\uffc3\065\uffc3\066" +
    "\uffc3\070\uffc3\071\uffc3\072\uffc3\001\002\000\046\003\205" +
    "\007\012\010\177\012\210\013\166\014\173\016\204\021" +
    "\167\023\200\035\252\036\024\047\064\062\176\065\023" +
    "\066\013\070\040\071\056\072\016\001\002\000\004\035" +
    "\uffc6\001\002\000\046\003\uffc1\007\uffc1\010\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\016\uffc1\021\uffc1\023\uffc1\035\uffc1\036" +
    "\uffc1\047\uffc1\062\uffc1\065\uffc1\066\uffc1\070\uffc1\071\uffc1" +
    "\072\uffc1\001\002\000\004\043\255\001\002\000\046\003" +
    "\uffb8\007\uffb8\010\uffb8\012\uffb8\013\uffb8\014\uffb8\016\uffb8" +
    "\021\uffb8\023\uffb8\035\uffb8\036\uffb8\047\uffb8\062\uffb8\065" +
    "\uffb8\066\uffb8\070\uffb8\071\uffb8\072\uffb8\001\002\000\004" +
    "\034\273\001\002\000\030\022\036\025\044\034\034\036" +
    "\062\040\061\047\064\062\047\063\055\064\065\070\040" +
    "\071\056\001\002\000\006\041\261\057\075\001\002\000" +
    "\004\034\262\001\002\000\046\003\uffc3\007\uffc3\010\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\016\uffc3\021\uffc3\023\uffc3\035" +
    "\uffc3\036\uffc3\047\uffc3\062\uffc3\065\uffc3\066\uffc3\070\uffc3" +
    "\071\uffc3\072\uffc3\001\002\000\046\003\205\007\012\010" +
    "\177\012\210\013\166\014\173\016\204\021\167\023\200" +
    "\035\264\036\024\047\064\062\176\065\023\066\013\070" +
    "\040\071\056\072\016\001\002\000\050\003\uffc9\007\uffc9" +
    "\010\uffc9\011\265\012\uffc9\013\uffc9\014\uffc9\016\uffc9\021" +
    "\uffc9\023\uffc9\035\uffc9\036\uffc9\047\uffc9\062\uffc9\065\uffc9" +
    "\066\uffc9\070\uffc9\071\uffc9\072\uffc9\001\002\000\006\010" +
    "\177\034\270\001\002\000\046\003\uffcd\007\uffcd\010\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\016\uffcd\021\uffcd\023\uffcd\035" +
    "\uffcd\036\uffcd\047\uffcd\062\uffcd\065\uffcd\066\uffcd\070\uffcd" +
    "\071\uffcd\072\uffcd\001\002\000\046\003\uffcb\007\uffcb\010" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\021\uffcb\023\uffcb" +
    "\035\uffcb\036\uffcb\047\uffcb\062\uffcb\065\uffcb\066\uffcb\070" +
    "\uffcb\071\uffcb\072\uffcb\001\002\000\046\003\uffc3\007\uffc3" +
    "\010\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\021\uffc3\023" +
    "\uffc3\035\uffc3\036\uffc3\047\uffc3\062\uffc3\065\uffc3\066\uffc3" +
    "\070\uffc3\071\uffc3\072\uffc3\001\002\000\046\003\205\007" +
    "\012\010\177\012\210\013\166\014\173\016\204\021\167" +
    "\023\200\035\272\036\024\047\064\062\176\065\023\066" +
    "\013\070\040\071\056\072\016\001\002\000\046\003\uffca" +
    "\007\uffca\010\uffca\012\uffca\013\uffca\014\uffca\016\uffca\021" +
    "\uffca\023\uffca\035\uffca\036\uffca\047\uffca\062\uffca\065\uffca" +
    "\066\uffca\070\uffca\071\uffca\072\uffca\001\002\000\046\003" +
    "\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3" +
    "\021\uffc3\023\uffc3\035\uffc3\036\uffc3\047\uffc3\062\uffc3\065" +
    "\uffc3\066\uffc3\070\uffc3\071\uffc3\072\uffc3\001\002\000\046" +
    "\003\205\007\012\010\177\012\210\013\166\014\173\016" +
    "\204\021\167\023\200\035\275\036\024\047\064\062\176" +
    "\065\023\066\013\070\040\071\056\072\016\001\002\000" +
    "\050\003\uffc9\007\uffc9\010\uffc9\011\265\012\uffc9\013\uffc9" +
    "\014\uffc9\016\uffc9\021\uffc9\023\uffc9\035\uffc9\036\uffc9\047" +
    "\uffc9\062\uffc9\065\uffc9\066\uffc9\070\uffc9\071\uffc9\072\uffc9" +
    "\001\002\000\046\003\uffcc\007\uffcc\010\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\016\uffcc\021\uffcc\023\uffcc\035\uffcc\036\uffcc" +
    "\047\uffcc\062\uffcc\065\uffcc\066\uffcc\070\uffcc\071\uffcc\072" +
    "\uffcc\001\002\000\046\003\uffc2\007\uffc2\010\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\016\uffc2\021\uffc2\023\uffc2\035\uffc2\036" +
    "\uffc2\047\uffc2\062\uffc2\065\uffc2\066\uffc2\070\uffc2\071\uffc2" +
    "\072\uffc2\001\002\000\046\003\uffc3\007\uffc3\010\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\016\uffc3\021\uffc3\023\uffc3\035\uffc3" +
    "\036\uffc3\047\uffc3\062\uffc3\065\uffc3\066\uffc3\070\uffc3\071" +
    "\uffc3\072\uffc3\001\002\000\046\003\205\007\012\010\177" +
    "\012\210\013\166\014\173\016\204\021\167\023\200\035" +
    "\302\036\024\047\064\062\176\065\023\066\013\070\040" +
    "\071\056\072\016\001\002\000\004\015\303\001\002\000" +
    "\006\003\304\040\305\001\002\000\004\043\uffce\001\002" +
    "\000\030\022\036\025\044\034\034\036\062\040\061\047" +
    "\064\062\047\063\055\064\065\070\040\071\056\001\002" +
    "\000\006\041\307\057\075\001\002\000\004\043\uffcf\001" +
    "\002\000\030\022\036\025\044\034\034\036\062\040\061" +
    "\047\064\062\047\063\055\064\065\070\040\071\056\001" +
    "\002\000\010\041\uffb6\043\uffb6\057\075\001\002\000\046" +
    "\003\uffba\007\uffba\010\uffba\012\uffba\013\uffba\014\uffba\016" +
    "\uffba\021\uffba\023\uffba\035\uffba\036\uffba\047\uffba\062\uffba" +
    "\065\uffba\066\uffba\070\uffba\071\uffba\072\uffba\001\002\000" +
    "\006\043\314\057\075\001\002\000\046\003\uffb9\007\uffb9" +
    "\010\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\021\uffb9\023" +
    "\uffb9\035\uffb9\036\uffb9\047\uffb9\062\uffb9\065\uffb9\066\uffb9" +
    "\070\uffb9\071\uffb9\072\uffb9\001\002\000\004\034\324\001" +
    "\002\000\030\022\036\025\044\034\034\036\062\040\061" +
    "\047\064\062\047\063\055\064\065\070\040\071\056\001" +
    "\002\000\006\041\320\057\075\001\002\000\004\034\321" +
    "\001\002\000\046\003\uffc3\007\uffc3\010\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\016\uffc3\021\uffc3\023\uffc3\035\uffc3\036\uffc3" +
    "\047\uffc3\062\uffc3\065\uffc3\066\uffc3\070\uffc3\071\uffc3\072" +
    "\uffc3\001\002\000\046\003\205\007\012\010\177\012\210" +
    "\013\166\014\173\016\204\021\167\023\200\035\323\036" +
    "\024\047\064\062\176\065\023\066\013\070\040\071\056" +
    "\072\016\001\002\000\046\003\uffd3\007\uffd3\010\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\016\uffd3\021\uffd3\023\uffd3\035\uffd3" +
    "\036\uffd3\047\uffd3\062\uffd3\065\uffd3\066\uffd3\070\uffd3\071" +
    "\uffd3\072\uffd3\001\002\000\046\003\uffc3\007\uffc3\010\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\016\uffc3\021\uffc3\023\uffc3\035" +
    "\uffc3\036\uffc3\047\uffc3\062\uffc3\065\uffc3\066\uffc3\070\uffc3" +
    "\071\uffc3\072\uffc3\001\002\000\046\003\205\007\012\010" +
    "\177\012\210\013\166\014\173\016\204\021\167\023\200" +
    "\035\326\036\024\047\064\062\176\065\023\066\013\070" +
    "\040\071\056\072\016\001\002\000\046\003\uffd2\007\uffd2" +
    "\010\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2\021\uffd2\023" +
    "\uffd2\035\uffd2\036\uffd2\047\uffd2\062\uffd2\065\uffd2\066\uffd2" +
    "\070\uffd2\071\uffd2\072\uffd2\001\002\000\004\065\330\001" +
    "\002\000\004\034\331\001\002\000\046\003\uffc3\007\uffc3" +
    "\010\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\021\uffc3\023" +
    "\uffc3\035\uffc3\036\uffc3\047\uffc3\062\uffc3\065\uffc3\066\uffc3" +
    "\070\uffc3\071\uffc3\072\uffc3\001\002\000\046\003\205\007" +
    "\012\010\177\012\210\013\166\014\173\016\204\021\167" +
    "\023\200\035\333\036\024\047\064\062\176\065\023\066" +
    "\013\070\040\071\056\072\016\001\002\000\030\002\ufff1" +
    "\003\ufff1\004\ufff1\005\ufff1\007\ufff1\036\ufff1\062\ufff1\065" +
    "\ufff1\066\ufff1\067\ufff1\072\ufff1\001\002\000\006\033\335" +
    "\043\uffde\001\002\000\030\022\036\025\044\034\034\036" +
    "\062\040\061\047\064\062\047\063\055\064\065\070\040" +
    "\071\056\001\002\000\006\043\uffdd\057\075\001\002\000" +
    "\020\003\344\036\345\040\343\062\030\065\023\066\013" +
    "\072\341\001\002\000\006\046\u0106\062\u0107\001\002\000" +
    "\010\046\uffdf\061\u0101\062\uffdf\001\002\000\006\044\361" +
    "\061\374\001\002\000\014\036\345\062\030\065\023\066" +
    "\013\072\016\001\002\000\004\061\353\001\002\000\014" +
    "\036\024\062\030\065\023\066\013\072\016\001\002\000" +
    "\006\046\ufff3\062\ufff3\001\002\000\006\044\350\047\033" +
    "\001\002\000\030\022\036\025\044\034\034\036\062\040" +
    "\061\047\064\062\047\063\055\064\065\070\040\071\056" +
    "\001\002\000\006\037\352\057\075\001\002\000\006\046" +
    "\ufff2\062\ufff2\001\002\000\012\062\030\065\023\066\013" +
    "\072\016\001\002\000\004\034\355\001\002\000\046\003" +
    "\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3" +
    "\021\uffc3\023\uffc3\035\uffc3\036\uffc3\047\uffc3\062\uffc3\065" +
    "\uffc3\066\uffc3\070\uffc3\071\uffc3\072\uffc3\001\002\000\046" +
    "\003\205\007\012\010\177\012\210\013\166\014\173\016" +
    "\204\021\167\023\200\035\357\036\024\047\064\062\176" +
    "\065\023\066\013\070\040\071\056\072\016\001\002\000" +
    "\030\002\ufff8\003\ufff8\004\ufff8\005\ufff8\007\ufff8\036\ufff8" +
    "\062\ufff8\065\ufff8\066\ufff8\067\ufff8\072\ufff8\001\002\000" +
    "\006\041\362\044\361\001\002\000\014\036\345\062\030" +
    "\065\023\066\013\072\016\001\002\000\004\061\363\001" +
    "\002\000\012\062\030\065\023\066\013\072\016\001\002" +
    "\000\004\034\365\001\002\000\046\003\uffc3\007\uffc3\010" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\021\uffc3\023\uffc3" +
    "\035\uffc3\036\uffc3\047\uffc3\062\uffc3\065\uffc3\066\uffc3\070" +
    "\uffc3\071\uffc3\072\uffc3\001\002\000\046\003\205\007\012" +
    "\010\177\012\210\013\166\014\173\016\204\021\167\023" +
    "\200\035\367\036\024\047\064\062\176\065\023\066\013" +
    "\070\040\071\056\072\016\001\002\000\030\002\ufffa\003" +
    "\ufffa\004\ufffa\005\ufffa\007\ufffa\036\ufffa\062\ufffa\065\ufffa" +
    "\066\ufffa\067\ufffa\072\ufffa\001\002\000\006\046\371\062" +
    "\372\001\002\000\004\062\373\001\002\000\010\041\ufff7" +
    "\044\ufff7\061\ufff7\001\002\000\010\041\ufff6\044\ufff6\061" +
    "\ufff6\001\002\000\012\062\030\065\023\066\013\072\016" +
    "\001\002\000\004\034\376\001\002\000\046\003\uffc3\007" +
    "\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\021\uffc3" +
    "\023\uffc3\035\uffc3\036\uffc3\047\uffc3\062\uffc3\065\uffc3\066" +
    "\uffc3\070\uffc3\071\uffc3\072\uffc3\001\002\000\046\003\205" +
    "\007\012\010\177\012\210\013\166\014\173\016\204\021" +
    "\167\023\200\035\u0100\036\024\047\064\062\176\065\023" +
    "\066\013\070\040\071\056\072\016\001\002\000\030\002" +
    "\ufffb\003\ufffb\004\ufffb\005\ufffb\007\ufffb\036\ufffb\062\ufffb" +
    "\065\ufffb\066\ufffb\067\ufffb\072\ufffb\001\002\000\012\062" +
    "\030\065\023\066\013\072\016\001\002\000\004\034\u0103" +
    "\001\002\000\046\003\uffc3\007\uffc3\010\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\016\uffc3\021\uffc3\023\uffc3\035\uffc3\036\uffc3" +
    "\047\uffc3\062\uffc3\065\uffc3\066\uffc3\070\uffc3\071\uffc3\072" +
    "\uffc3\001\002\000\046\003\205\007\012\010\177\012\210" +
    "\013\166\014\173\016\204\021\167\023\200\035\u0105\036" +
    "\024\047\064\062\176\065\023\066\013\070\040\071\056" +
    "\072\016\001\002\000\030\002\ufff9\003\ufff9\004\ufff9\005" +
    "\ufff9\007\ufff9\036\ufff9\062\ufff9\065\ufff9\066\ufff9\067\ufff9" +
    "\072\ufff9\001\002\000\004\062\u0108\001\002\000\010\041" +
    "\ufff5\044\ufff5\061\ufff5\001\002\000\010\041\ufff4\044\ufff4" +
    "\061\ufff4\001\002\000\006\047\033\062\u010a\001\002\000" +
    "\004\033\u010b\001\002\000\030\022\036\025\044\034\034" +
    "\036\062\040\061\047\064\062\047\063\055\064\065\070" +
    "\040\071\056\001\002\000\006\043\uffdc\057\075\001\002" +
    "\000\006\006\u010e\047\033\001\002\000\004\062\u010f\001" +
    "\002\000\004\043\uffdb\001\002\000\014\036\024\062\030" +
    "\065\023\066\013\072\016\001\002\000\006\041\u0114\044" +
    "\u0113\001\002\000\010\041\uffd8\044\uffd8\047\033\001\002" +
    "\000\014\036\024\062\030\065\023\066\013\072\016\001" +
    "\002\000\004\034\u0115\001\002\000\004\062\u0116\001\002" +
    "\000\010\033\u011e\035\uffd4\044\uffd4\001\002\000\006\035" +
    "\u0119\044\u0118\001\002\000\004\062\u011b\001\002\000\004" +
    "\062\u011a\001\002\000\004\043\uffda\001\002\000\010\033" +
    "\u011c\035\uffd6\044\uffd6\001\002\000\030\022\036\025\044" +
    "\034\034\036\062\040\061\047\064\062\047\063\055\064" +
    "\065\070\040\071\056\001\002\000\010\035\uffd7\044\uffd7" +
    "\057\075\001\002\000\030\022\036\025\044\034\034\036" +
    "\062\040\061\047\064\062\047\063\055\064\065\070\040" +
    "\071\056\001\002\000\010\035\uffd5\044\uffd5\057\075\001" +
    "\002\000\010\041\uffd9\044\uffd9\047\033\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\022\005\013\010\017\011\024\012\005\015\021" +
    "\033\016\041\006\044\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\u010c\033\016" +
    "\001\001\000\006\010\u0108\033\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\030\033\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\016\057" +
    "\017\056\020\053\021\052\022\051\023\050\024\047\025" +
    "\045\026\044\034\040\046\062\051\042\052\041\053\036" +
    "\054\034\001\001\000\002\001\001\000\042\007\153\016" +
    "\067\017\056\020\053\021\052\022\051\023\050\024\047" +
    "\025\045\026\044\034\040\046\062\051\042\052\041\053" +
    "\036\054\034\001\001\000\002\001\001\000\006\010\150" +
    "\033\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\020\141\021\052\022\051\023\050\024\047\025\045\026" +
    "\044\034\040\046\062\051\042\052\041\053\036\054\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\124\001\001\000\004\031\120\001\001" +
    "\000\004\030\112\001\001\000\004\027\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\016\100\017\056\020" +
    "\053\021\052\022\051\023\050\024\047\025\045\026\044" +
    "\034\040\046\062\051\042\052\041\053\036\054\034\001" +
    "\001\000\042\007\070\016\067\017\056\020\053\021\052" +
    "\022\051\023\050\024\047\025\045\026\044\034\040\046" +
    "\062\051\042\052\041\053\036\054\034\001\001\000\002" +
    "\001\001\000\012\051\065\052\041\053\036\054\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\016\073\017" +
    "\056\020\053\021\052\022\051\023\050\024\047\025\045" +
    "\026\044\034\040\046\062\051\042\052\041\053\036\054" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\017\075\020\053\021\052\022\051\023\050\024\047\025" +
    "\045\026\044\034\040\046\062\051\042\052\041\053\036" +
    "\054\034\001\001\000\002\001\001\000\034\020\077\021" +
    "\052\022\051\023\050\024\047\025\045\026\044\034\040" +
    "\046\062\051\042\052\041\053\036\054\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\016\104\017\056\020\053\021\052\022" +
    "\051\023\050\024\047\025\045\026\044\034\040\046\062" +
    "\051\042\052\041\053\036\054\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\022\111" +
    "\023\050\024\047\025\045\026\044\034\040\046\062\051" +
    "\042\052\041\053\036\054\034\001\001\000\002\001\001" +
    "\000\004\030\112\001\001\000\026\023\117\024\047\025" +
    "\045\026\044\034\040\046\062\051\042\052\041\053\036" +
    "\054\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\120\001\001" +
    "\000\024\024\123\025\045\026\044\034\040\046\062\051" +
    "\042\052\041\053\036\054\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\124\001\001\000\022\025" +
    "\130\026\044\034\040\046\062\051\042\052\041\053\036" +
    "\054\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\026\132\034\040" +
    "\046\062\051\042\052\041\053\036\054\034\001\001\000" +
    "\002\001\001\000\042\016\134\017\056\020\053\021\052" +
    "\022\051\023\050\024\047\025\045\026\044\034\040\046" +
    "\062\047\135\051\042\052\041\053\036\054\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\016\140\017" +
    "\056\020\053\021\052\022\051\023\050\024\047\025\045" +
    "\026\044\034\040\046\062\051\042\052\041\053\036\054" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\016\143\017\056\020\053\021\052\022" +
    "\051\023\050\024\047\025\045\026\044\034\040\046\062" +
    "\051\042\052\041\053\036\054\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\053\152\054" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\164\001\001\000\040\004\167\005\173\006" +
    "\200\010\017\033\016\035\174\036\201\037\206\042\170" +
    "\046\210\051\171\052\041\053\036\054\034\055\202\001" +
    "\001\000\002\001\001\000\040\016\312\017\056\020\053" +
    "\021\052\022\051\023\050\024\047\025\045\026\044\034" +
    "\040\046\062\051\042\052\041\053\036\054\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\051\253\052\041\053" +
    "\036\054\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\051\232\052\041\053\036\054" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\214\010\017\033\016" +
    "\001\001\000\002\001\001\000\040\016\216\017\056\020" +
    "\053\021\052\022\051\023\050\024\047\025\045\026\044" +
    "\034\040\046\062\051\042\052\041\053\036\054\034\001" +
    "\001\000\002\001\001\000\014\006\220\051\171\052\041" +
    "\053\036\054\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\223\001\001\000\040\004\167\005\173" +
    "\006\200\010\017\033\016\035\174\036\201\037\206\042" +
    "\170\046\210\051\171\052\041\053\036\054\034\055\202" +
    "\001\001\000\002\001\001\000\004\040\226\001\001\000" +
    "\040\004\167\005\173\006\200\010\017\033\016\035\174" +
    "\036\201\037\206\042\170\046\210\051\171\052\041\053" +
    "\036\054\034\055\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\242\001\001\000\040\004\167\005\173\006\200\010\017" +
    "\033\016\035\174\036\201\037\206\042\170\046\210\051" +
    "\171\052\041\053\036\054\034\055\202\001\001\000\004" +
    "\056\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\250\001\001\000\040\004\167" +
    "\005\173\006\200\010\017\033\016\035\174\036\201\037" +
    "\206\042\170\046\210\051\171\052\041\053\036\054\034" +
    "\055\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\016\257\017\056\020\053\021\052\022\051\023\050\024" +
    "\047\025\045\026\044\034\040\046\062\051\042\052\041" +
    "\053\036\054\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\262\001\001\000\040\004\167\005\173" +
    "\006\200\010\017\033\016\035\174\036\201\037\206\042" +
    "\170\046\210\051\171\052\041\053\036\054\034\055\202" +
    "\001\001\000\004\043\265\001\001\000\004\042\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\270" +
    "\001\001\000\040\004\167\005\173\006\200\010\017\033" +
    "\016\035\174\036\201\037\206\042\170\046\210\051\171" +
    "\052\041\053\036\054\034\055\202\001\001\000\002\001" +
    "\001\000\004\040\273\001\001\000\040\004\167\005\173" +
    "\006\200\010\017\033\016\035\174\036\201\037\206\042" +
    "\170\046\210\051\171\052\041\053\036\054\034\055\202" +
    "\001\001\000\004\043\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\300\001\001\000\040\004\167" +
    "\005\173\006\200\010\017\033\016\035\174\036\201\037" +
    "\206\042\170\046\210\051\171\052\041\053\036\054\034" +
    "\055\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\016\305\017\056\020\053\021\052" +
    "\022\051\023\050\024\047\025\045\026\044\034\040\046" +
    "\062\051\042\052\041\053\036\054\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\016\310\017\056\020" +
    "\053\021\052\022\051\023\050\024\047\025\045\026\044" +
    "\034\040\046\062\051\042\052\041\053\036\054\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\016\316\017" +
    "\056\020\053\021\052\022\051\023\050\024\047\025\045" +
    "\026\044\034\040\046\062\051\042\052\041\053\036\054" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\321\001\001\000\040\004\167\005\173\006\200\010" +
    "\017\033\016\035\174\036\201\037\206\042\170\046\210" +
    "\051\171\052\041\053\036\054\034\055\202\001\001\000" +
    "\002\001\001\000\004\040\324\001\001\000\040\004\167" +
    "\005\173\006\200\010\017\033\016\035\174\036\201\037" +
    "\206\042\170\046\210\051\171\052\041\053\036\054\034" +
    "\055\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\331\001\001\000\040\004\167" +
    "\005\173\006\200\010\017\033\016\035\174\036\201\037" +
    "\206\042\170\046\210\051\171\052\041\053\036\054\034" +
    "\055\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\016\335\017\056\020\053\021\052\022\051\023\050" +
    "\024\047\025\045\026\044\034\040\046\062\051\042\052" +
    "\041\053\036\054\034\001\001\000\002\001\001\000\010" +
    "\033\345\045\341\050\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\033\345\045\357" +
    "\050\337\001\001\000\002\001\001\000\006\010\346\033" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\016\350\017\056\020\053\021\052\022\051\023\050\024" +
    "\047\025\045\026\044\034\040\046\062\051\042\052\041" +
    "\053\036\054\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\353\001\001\000\002\001\001\000\004" +
    "\040\355\001\001\000\040\004\167\005\173\006\200\010" +
    "\017\033\016\035\174\036\201\037\206\042\170\046\210" +
    "\051\171\052\041\053\036\054\034\055\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\345\050\367" +
    "\001\001\000\002\001\001\000\004\033\363\001\001\000" +
    "\002\001\001\000\004\040\365\001\001\000\040\004\167" +
    "\005\173\006\200\010\017\033\016\035\174\036\201\037" +
    "\206\042\170\046\210\051\171\052\041\053\036\054\034" +
    "\055\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\374\001\001\000\002\001\001\000\004\040\376\001" +
    "\001\000\040\004\167\005\173\006\200\010\017\033\016" +
    "\035\174\036\201\037\206\042\170\046\210\051\171\052" +
    "\041\053\036\054\034\055\202\001\001\000\002\001\001" +
    "\000\004\033\u0101\001\001\000\002\001\001\000\004\040" +
    "\u0103\001\001\000\040\004\167\005\173\006\200\010\017" +
    "\033\016\035\174\036\201\037\206\042\170\046\210\051" +
    "\171\052\041\053\036\054\034\055\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\016\u010b" +
    "\017\056\020\053\021\052\022\051\023\050\024\047\025" +
    "\045\026\044\034\040\046\062\051\042\052\041\053\036" +
    "\054\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\u0111\013\u0110" +
    "\033\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\u011f\033\016\001\001\000\002\001\001\000\004" +
    "\014\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\016\u011c\017\056\020\053\021\052\022" +
    "\051\023\050\024\047\025\045\026\044\034\040\046\062" +
    "\051\042\052\041\053\036\054\034\001\001\000\002\001" +
    "\001\000\040\016\u011e\017\056\020\053\021\052\022\051" +
    "\023\050\024\047\025\045\026\044\034\040\046\062\051" +
    "\042\052\041\053\036\054\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoExp$actions {
  private final AnalizadorSintacticoExp parser;

  /** Constructor */
  CUP$AnalizadorSintacticoExp$actions(AnalizadorSintacticoExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoExp$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoExp$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoExp$parser,
    java.util.Stack            CUP$AnalizadorSintacticoExp$stack,
    int                        CUP$AnalizadorSintacticoExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoExp$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= INSTRUCCION_GLOBAL 
            {
              Programa RESULT =null;
		ArrayList<Instruccion> instGlob = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new Programa(instGlob); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoExp$parser.done_parsing();
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION_GLOBAL ::= INSTRUCCION_GLOBAL CREACION PYC 
            {
              ArrayList<Instruccion> RESULT =null;
		ArrayList<Instruccion> instGlob = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Creacion crea = (Creacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 instGlob.add(crea); RESULT = instGlob; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_GLOBAL",1, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION_GLOBAL ::= INSTRUCCION_GLOBAL FUN_MAIN 
            {
              ArrayList<Instruccion> RESULT =null;
		ArrayList<Instruccion> instGlob = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		Funcion fMain = (Funcion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 instGlob.add(fMain); RESULT = instGlob; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_GLOBAL",1, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION_GLOBAL ::= INSTRUCCION_GLOBAL FUNCION 
            {
              ArrayList<Instruccion> RESULT =null;
		ArrayList<Instruccion> instGlob = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		Funcion fun = (Funcion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 instGlob.add(fun); RESULT = instGlob; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_GLOBAL",1, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION_GLOBAL ::= 
            {
              ArrayList<Instruccion> RESULT =null;
		 RESULT = new ArrayList<Instruccion>(); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_GLOBAL",1, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= IDEN DOSP PARAMS_FUN FLCH TIPO_BASICO LAPE BLOQUE LCIE 
            {
              Funcion RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-7)).value;
		ArrayList<Parametro> paramsF = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-5)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new Funcion(id.lexema, tipo, paramsF, blq); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("FUNCION",34, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= IDEN DOSP PAPE PARAMS_FUN PCIE FLCH TIPO_BASICO LAPE BLOQUE LCIE 
            {
              Funcion RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-9)).value;
		ArrayList<Parametro> paramsF = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-6)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new Funcion(id.lexema, tipo, paramsF, blq); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("FUNCION",34, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= IDEN DOSP EMPT FLCH TIPO_BASICO LAPE BLOQUE LCIE 
            {
              Funcion RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-7)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new Funcion(id.lexema, tipo, new ArrayList<Parametro>(), blq); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("FUNCION",34, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= IDEN DOSP error FLCH TIPO_BASICO LAPE BLOQUE LCIE 
            {
              Funcion RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-7)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 System.out.println("ERROR EN LA DECLARACIÓN DE UNA FUNCION"); RESULT = null; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("FUNCION",34, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARAMS_FUN ::= PARAMS_FUN COMA TIPOS_FUN IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> pFun = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		Tipo tFun = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 pFun.add(new Parametro(tFun, id.lexema)); RESULT = pFun; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("PARAMS_FUN",35, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMS_FUN ::= PARAMS_FUN COMA TIPOS_FUN INTR IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> pFun = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-4)).value;
		Tipo tFun = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 pFun.add(new Parametro(tFun, id.lexema, true)); RESULT = pFun; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("PARAMS_FUN",35, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS_FUN ::= TIPOS_FUN IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		Tipo tFun = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new ArrayList<Parametro>(); RESULT.add(new Parametro(tFun, id.lexema)); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("PARAMS_FUN",35, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMS_FUN ::= TIPOS_FUN INTR IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		Tipo tFun = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new ArrayList<Parametro>(); RESULT.add(new Parametro(tFun, id.lexema, true)); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("PARAMS_FUN",35, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOS_FUN ::= TIPO_BASICO 
            {
              Tipo RESULT =null;
		Tipo tipoB = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = tipoB; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("TIPOS_FUN",38, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOS_FUN ::= CAPE TIPO COMA E0 CCIE 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new TArray(tipo, exp); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("TIPOS_FUN",38, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUN_MAIN ::= MAIN DOSP EMPT FLCH TINT LAPE BLOQUE LCIE 
            {
              Funcion RESULT =null;
		TokenValue main = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-7)).value;
		TokenValue tInt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		ArrayList<Instruccion> bloq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new Funcion(main.lexema, new TBasicos(KindT.TINT), new ArrayList<Parametro>(), bloq); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("FUN_MAIN",31, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUN_MAIN ::= MAIN DOSP error FLCH TINT LAPE BLOQUE LCIE 
            {
              Funcion RESULT =null;
		TokenValue main = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-7)).value;
		TokenValue tInt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		ArrayList<Instruccion> bloq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		System.out.println("ERROR EN LA DECLARACIÓN DE MAIN"); RESULT = null; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("FUN_MAIN",31, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LLAMADA_FUN ::= IDEN PAPE ARGS_FUN PCIE 
            {
              LlamadaFun RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		ArrayList<Expresion> argsF = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new LlamadaFun(id.lexema, argsF); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUN",36, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LLAMADA_FUN ::= READ PAPE IDEN PCIE 
            {
              LlamadaFun RESULT =null;
		TokenValue read = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new LlamadaFun(read.lexema, new AId(id.lexema)); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUN",36, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA_FUN ::= WRTE PAPE E0 PCIE 
            {
              LlamadaFun RESULT =null;
		TokenValue write = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new LlamadaFun(write.lexema, exp); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUN",36, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARGS_FUN ::= ARGS_FUN COMA E0 
            {
              ArrayList<Expresion> RESULT =null;
		ArrayList<Expresion> argsF = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 argsF.add(exp); RESULT = argsF; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ARGS_FUN",37, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGS_FUN ::= E0 
            {
              ArrayList<Expresion> RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(exp); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ARGS_FUN",37, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARGS_FUN ::= 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ARGS_FUN",37, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CREACION ::= DECLARACION 
            {
              Creacion RESULT =null;
		Declaracion decl = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = decl; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("CREACION",11, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CREACION ::= DENOTE 
            {
              Creacion RESULT =null;
		Denote deno = (Denote)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = deno; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("CREACION",11, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CREACION ::= CREATE_TUPL 
            {
              Creacion RESULT =null;
		CreacionTupla creaT = (CreacionTupla)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = creaT; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("CREACION",11, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CREACION ::= error 
            {
              Creacion RESULT =null;
		 System.out.println("ERROR EN CREACIÓN"); RESULT = null; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("CREACION",11, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO ::= TIPO_BASICO 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = tipo; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("TIPO",6, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO ::= TIPO ROBA 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new TPuntero(tipo); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("TIPO",6, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO ::= CAPE TIPO COMA E0 CCIE 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new TArray(tipo, exp); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("TIPO",6, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO_BASICO ::= IDEN 
            {
              Tipo RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new TDenote(id.lexema); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",25, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_BASICO ::= TBOO 
            {
              Tipo RESULT =null;
		TokenValue tBoo = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new TBasicos(KindT.TBOO); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",25, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_BASICO ::= TINT 
            {
              Tipo RESULT =null;
		TokenValue tInt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new TBasicos(KindT.TINT); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",25, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_BASICO ::= EMPT 
            {
              Tipo RESULT =null;
		TokenValue empty = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new TBasicos(KindT.EMPT); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",25, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= TIPO IDEN 
            {
              Declaracion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new Declaracion(tipo, id.lexema); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= TIPO IDEN ASIG E0 
            {
              Declaracion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new Declaracion(tipo, id.lexema, exp); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= CTE TIPO IDEN ASIG E0 
            {
              Declaracion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new Declaracion(tipo, id.lexema, exp, true); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DENOTE ::= DENO TIPO AS IDEN 
            {
              Denote RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new Denote(tipo, id.lexema); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("DENOTE",7, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CREATE_TUPL ::= TUPL PAPE TIPOS_TUPL PCIE LAPE ITEMS_TUPL LCIE IDEN 
            {
              CreacionTupla RESULT =null;
		ArrayList<Tipo> tipos = (ArrayList<Tipo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-5)).value;
		ArrayList<CampoTupla> campos = (ArrayList<CampoTupla>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new CreacionTupla(id.lexema, tipos, campos); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("CREATE_TUPL",8, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOS_TUPL ::= TIPOS_TUPL COMA TIPO 
            {
              ArrayList<Tipo> RESULT =null;
		ArrayList<Tipo> tiposT = (ArrayList<Tipo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 tiposT.add(tipo); RESULT = tiposT; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("TIPOS_TUPL",9, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOS_TUPL ::= TIPO 
            {
              ArrayList<Tipo> RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new ArrayList<Tipo>(); RESULT.add(tipo); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("TIPOS_TUPL",9, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ITEMS_TUPL ::= ITEMS_TUPL COMA IDEN ASIG E0 
            {
              ArrayList<CampoTupla> RESULT =null;
		ArrayList<CampoTupla> items = (ArrayList<CampoTupla>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-4)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 items.add(new CampoTupla(id.lexema, exp)); RESULT = items; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ITEMS_TUPL",10, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ITEMS_TUPL ::= ITEMS_TUPL COMA IDEN 
            {
              ArrayList<CampoTupla> RESULT =null;
		ArrayList<CampoTupla> items = (ArrayList<CampoTupla>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 items.add(new CampoTupla(id.lexema)); RESULT = items; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ITEMS_TUPL",10, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ITEMS_TUPL ::= IDEN ASIG E0 
            {
              ArrayList<CampoTupla> RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new ArrayList<CampoTupla>(); RESULT.add(new CampoTupla(id.lexema, exp)); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ITEMS_TUPL",10, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ITEMS_TUPL ::= IDEN 
            {
              ArrayList<CampoTupla> RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new ArrayList<CampoTupla>(); RESULT.add(new CampoTupla(id.lexema)); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ITEMS_TUPL",10, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BUCLE_WHILE ::= WHIL PAPE E0 PCIE LAPE BLOQUE LCIE 
            {
              While RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-4)).value;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new While(exp, blq); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("BUCLE_WHILE",27, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BUCLE_WHILE ::= WHIL error LAPE BLOQUE LCIE 
            {
              While RESULT =null;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 System.out.println("ERROR EN BUCLE WHILE"); RESULT = null; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("BUCLE_WHILE",27, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BUCLE_FOR ::= FOR PAPE DECLARACION PYC E0 PYC ASIGNACION PCIE LAPE BLOQUE LCIE 
            {
              For RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-8)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-6)).value;
		Asignacion asig = (Asignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-4)).value;
		ArrayList<Instruccion> bloq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new For(dec, exp, asig, bloq); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("BUCLE_FOR",28, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BUCLE_FOR ::= FOR error LAPE BLOQUE LCIE 
            {
              For RESULT =null;
		ArrayList<Instruccion> bloq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 System.out.println("ERROR EN BUCLE FOR"); RESULT = null; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("BUCLE_FOR",28, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BUCLE_REPEAT ::= REPE LAPE BLOQUE LCIE UNTL PAPE E0 PCIE 
            {
              Repeat RESULT =null;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-5)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new Repeat(exp, blq); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("BUCLE_REPEAT",29, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BUCLE_REPEAT ::= REPE LAPE BLOQUE LCIE UNTL error 
            {
              Repeat RESULT =null;
		ArrayList<Instruccion> bloq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		 System.out.println("ERROR EN BUCLE REPEAT"); RESULT = null; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("BUCLE_REPEAT",29, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF_COND ::= IF PAPE E0 PCIE LAPE BLOQUE LCIE ELSE_COND 
            {
              Condicional RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-5)).value;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Condicional nextCond = (Condicional)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new Condicional(exp, blq, nextCond); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("IF_COND",32, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF_COND ::= IF error LAPE BLOQUE LCIE ELSE_COND 
            {
              Condicional RESULT =null;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Condicional nextCond = (Condicional)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 System.out.println("ERROR EN CONDICIONAL"); RESULT = null; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("IF_COND",32, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELSE_COND ::= ELSE IF_COND 
            {
              Condicional RESULT =null;
		Condicional cond = (Condicional)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = cond; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ELSE_COND",33, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELSE_COND ::= ELSE LAPE BLOQUE LCIE 
            {
              Condicional RESULT =null;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new Condicional(null, blq, null); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ELSE_COND",33, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSE_COND ::= 
            {
              Condicional RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ELSE_COND",33, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INCASE ::= CASE A0 LAPE CUERPO_INCASE LCIE 
            {
              Incase RESULT =null;
		Acceso acc = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		ArrayList<CasoIncase> cpoInc = (ArrayList<CasoIncase>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new Incase(acc, cpoInc); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INCASE",43, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUERPO_INCASE ::= EQLS EINT THEN LAPE BLOQUE LCIE CUERPO_INCASE 
            {
              ArrayList<CasoIncase> RESULT =null;
		TokenValue eInt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-5)).value;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		ArrayList<CasoIncase> cpoInc = (ArrayList<CasoIncase>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 cpoInc.add(new CasoIncase(Integer.valueOf(Integer.parseInt(eInt.lexema)), blq)); RESULT = cpoInc; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("CUERPO_INCASE",44, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CUERPO_INCASE ::= OTWS THEN LAPE BLOQUE LCIE 
            {
              ArrayList<CasoIncase> RESULT =null;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new ArrayList<CasoIncase>(); RESULT.add(new CasoIncase(null, blq)); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("CUERPO_INCASE",44, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CUERPO_INCASE ::= 
            {
              ArrayList<CasoIncase> RESULT =null;
		 RESULT = new ArrayList<CasoIncase>(); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("CUERPO_INCASE",44, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE ::= BLOQUE INSTRUCCION 
            {
              ArrayList<Instruccion> RESULT =null;
		ArrayList<Instruccion> blq = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		Instruccion inst = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 blq.add(inst); RESULT = blq; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE ::= 
            {
              ArrayList<Instruccion> RESULT =null;
		 RESULT = new ArrayList<Instruccion>(); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INSTRUCCION ::= DECLARACION PYC 
            {
              Instruccion RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = dec; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INSTRUCCION ::= ASIGNACION PYC 
            {
              Instruccion RESULT =null;
		Asignacion asig = (Asignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = asig; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INSTRUCCION ::= INCASE 
            {
              Instruccion RESULT =null;
		Incase incase = (Incase)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = incase; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INSTRUCCION ::= BUCLE_FOR 
            {
              Instruccion RESULT =null;
		For bFor = (For)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = bFor; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INSTRUCCION ::= BUCLE_WHILE 
            {
              Instruccion RESULT =null;
		While bWhile = (While)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = bWhile; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTRUCCION ::= BUCLE_REPEAT PYC 
            {
              Instruccion RESULT =null;
		Repeat bRepeat = (Repeat)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = bRepeat; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTRUCCION ::= IF_COND 
            {
              Instruccion RESULT =null;
		Condicional cond = (Condicional)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = cond; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTRUCCION ::= LLAMADA_FUN PYC 
            {
              Instruccion RESULT =null;
		LlamadaFun llamFun = (LlamadaFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = llamFun; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTRUCCION ::= RET PYC 
            {
              Instruccion RESULT =null;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new Return(null); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTRUCCION ::= RET E0 PYC 
            {
              Instruccion RESULT =null;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new Return(exp); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTRUCCION ::= DEL A0 PYC 
            {
              Instruccion RESULT =null;
		Object del = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Acceso acc = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new Delete(acc); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTRUCCION ::= error PYC 
            {
              Instruccion RESULT =null;
		 System.out.println("ERROR EN UNA INSTRUCCION"); RESULT = null; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION ::= A0 ASIG E0 
            {
              Asignacion RESULT =null;
		Acceso acc = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new Asignacion(acc, exp); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E0 ::= E0 OR E1 
            {
              Expresion RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new EBin(exp0, KindE.OR, exp1); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E0",12, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E0 ::= E1 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = exp1; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E0",12, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E1 ::= E1 AND E2 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new EBin(exp1, KindE.AND, exp2); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E1",13, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = exp2; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E1",13, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E2 ::= NOT E2 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new EUn(exp2, KindE.NOT); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E2",14, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion exp3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = exp3; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E2",14, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E3 ::= E3 OP1 E4 
            {
              Expresion RESULT =null;
		Expresion exp3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		KindE op1 = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		Expresion exp4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new EBin(exp3, op1, exp4); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E3",15, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion exp4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = exp4; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E3",15, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E4 ::= E4 OP2 E5 
            {
              Expresion RESULT =null;
		Expresion exp4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		KindE op2 = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		Expresion exp5 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new EBin(exp4, op2, exp5); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E4",16, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion exp5 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = exp5; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E4",16, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E5 ::= E5 OP3 E6 
            {
              Expresion RESULT =null;
		Expresion exp5 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		KindE op3 = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		Expresion exp6 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new EBin(exp5, op3, exp6); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion exp6 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = exp6; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E6 ::= E6 OP4 E7 
            {
              Expresion RESULT =null;
		Expresion exp6 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		KindE op4 = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		Expresion exp7 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new EBin(exp6, op4, exp7); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E6",18, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion exp7 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = exp7; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E6",18, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E7 ::= E7 POT E8 
            {
              Expresion RESULT =null;
		Expresion exp7 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Expresion exp8 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new EBin(exp7, KindE.POT, exp8); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E7",19, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E7 ::= E8 
            {
              Expresion RESULT =null;
		Expresion exp8 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT =  exp8; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E7",19, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E8 ::= A0 
            {
              Expresion RESULT =null;
		Acceso acc = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = acc; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E8",20, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E8 ::= CONSTANTES 
            {
              Expresion RESULT =null;
		Constantes consts = (Constantes)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = consts; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E8",20, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E8 ::= LAPE ELEMS LCIE 
            {
              Expresion RESULT =null;
		ArrayList<Expresion> elems = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new Tupla(elems); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E8",20, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E8 ::= PAPE E0 PCIE 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E8",20, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E8 ::= CAPE ELEMS CCIE 
            {
              Expresion RESULT =null;
		ArrayList<Expresion> elems = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new Array(elems); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E8",20, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E8 ::= LLAMADA_FUN 
            {
              Expresion RESULT =null;
		LlamadaFun llamFun = (LlamadaFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new LlamadaFunExp(llamFun); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E8",20, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E8 ::= NMEM TIPO 
            {
              Expresion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new NewMem(tipo); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("E8",20, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELEMS ::= ELEMS COMA E0 
            {
              ArrayList<Expresion> RESULT =null;
		ArrayList<Expresion> elems = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 elems.add(exp); RESULT = elems; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ELEMS",5, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELEMS ::= E0 
            {
              ArrayList<Expresion> RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(exp); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ELEMS",5, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELEMS ::= 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("ELEMS",5, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONSTANTES ::= EINT 
            {
              Constantes RESULT =null;
		TokenValue eInt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new Int(eInt.lexema);  
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("CONSTANTES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONSTANTES ::= EBOO 
            {
              Constantes RESULT =null;
		TokenValue eBoo = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new Bool(eBoo.lexema); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("CONSTANTES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // A0 ::= ROBA A0 
            {
              Acceso RESULT =null;
		Acceso acc = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new AUn(acc, KindA.ROBA); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("A0",39, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // A0 ::= A1 
            {
              Acceso RESULT =null;
		Acceso acc = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = acc; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("A0",39, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // A2 ::= A3 PTO A2 
            {
              Acceso RESULT =null;
		Acceso acc1 = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-2)).value;
		Acceso acc2 = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new ABin(acc1, KindA.PTO, acc2); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("A2",41, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // A2 ::= A3 
            {
              Acceso RESULT =null;
		Acceso acc2 = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT =  acc2; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("A2",41, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // A1 ::= A1 CAPE E0 CCIE 
            {
              Acceso RESULT =null;
		Acceso acc2 = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.elementAt(CUP$AnalizadorSintacticoExp$top-1)).value;
		 RESULT = new ABin(acc2, KindA.CORCHS, exp); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("A1",40, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // A1 ::= A2 
            {
              Acceso RESULT =null;
		Acceso acc3 = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT =  acc3; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("A1",40, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // A3 ::= IDEN 
            {
              Acceso RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoExp$stack.peek()).value;
		 RESULT = new AId(id.lexema); 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("A3",42, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP1 ::= EQ 
            {
              KindE RESULT =null;
		 RESULT = KindE.EQ; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("OP1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OP1 ::= NEQ 
            {
              KindE RESULT =null;
		 RESULT = KindE.NEQ; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("OP1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP2 ::= LEQ 
            {
              KindE RESULT =null;
		 RESULT = KindE.LEQ; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("OP2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP2 ::= GEQ 
            {
              KindE RESULT =null;
		 RESULT = KindE.GEQ; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("OP2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP2 ::= LESS 
            {
              KindE RESULT =null;
		 RESULT = KindE.LESS; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("OP2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP2 ::= GREA 
            {
              KindE RESULT =null;
		 RESULT = KindE.GREA; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("OP2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP3 ::= SUMA 
            {
              KindE RESULT =null;
		 RESULT = KindE.SUMA; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("OP3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP3 ::= RSTA 
            {
              KindE RESULT =null;
		 RESULT = KindE.RSTA; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("OP3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP4 ::= PROD 
            {
              KindE RESULT =null;
		 RESULT = KindE.PROD; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("OP4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP4 ::= DIV 
            {
              KindE RESULT =null;
		 RESULT = KindE.DIV; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("OP4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP4 ::= MOD 
            {
              KindE RESULT =null;
		 RESULT = KindE.MOD; 
              CUP$AnalizadorSintacticoExp$result = parser.getSymbolFactory().newSymbol("OP4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoExp$do_action(
    int                        CUP$AnalizadorSintacticoExp$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoExp$parser,
    java.util.Stack            CUP$AnalizadorSintacticoExp$stack,
    int                        CUP$AnalizadorSintacticoExp$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoExp$do_action_part00000000(
                               CUP$AnalizadorSintacticoExp$act_num,
                               CUP$AnalizadorSintacticoExp$parser,
                               CUP$AnalizadorSintacticoExp$stack,
                               CUP$AnalizadorSintacticoExp$top);
    }
}

